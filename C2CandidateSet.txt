import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class C2Candidates {

	public synchronized void generateCandidateSet(final int min_support_count,List<String> candidateKeysSet,Map<Integer,List<Integer>> transactionDBMap,String OutputFilePath) throws IOException, InterruptedException {
		
				List<String> binaryString = candidateKeysSet;
				
		        
		        List<Integer> binaryList = new ArrayList<>();
				for(String b: binaryString){
					int c = Integer.parseInt(b);
					binaryList.add(c);
				}
				
				try(PrintWriter k1writer = new PrintWriter(new BufferedWriter(new FileWriter(OutputFilePath+"/FrequentRecursiveSet.txt", true)))){
					
					C2Candidates n1 = new C2Candidates();
					StringBuffer buffer = new StringBuffer();
					
					String a = n1.initiateComparator(binaryList,min_support_count,transactionDBMap,buffer);
					//System.out.println(a);
							if(a.length() > 0 && a != null){
								k1writer.append(a);
							}
							k1writer.flush();
							k1writer.close();
					}catch(IOException ioe)
					{
					    System.err.println("IOException: " + ioe.getMessage());
					}
				}

	public synchronized String initiateComparator(List<Integer> candidateKeysSet2,int min_support_count,Map<Integer, List<Integer>> transactionDBMap,
			StringBuffer buff) {

		int counter = 0;
		
		if (candidateKeysSet2.isEmpty() && transactionDBMap.isEmpty()) {
			System.out
					.println(" Critical the Sets which are to be compared is empty");
		} else {
			Set<Integer> keys = transactionDBMap.keySet();
			for (int transacKey : keys) {

				List<Integer> transactionList = transactionDBMap
						.get(transacKey);
				List<Integer> dummytempList = new ArrayList<>();
				for (int copy : candidateKeysSet2) {
					dummytempList.add(copy);
				}

				if (!(dummytempList.retainAll(transactionList))
						&& !(dummytempList.isEmpty())) {

					int dummysize = dummytempList.size();
					int itemsize = candidateKeysSet2.size();

					if (dummysize == itemsize) {
						counter++;
					}
				}

			}

			if (counter >= min_support_count) {
				for (int i = 0; i < candidateKeysSet2.size(); i++) {
					int c = candidateKeysSet2.get(i);
					buff.append(c + "");
					if (i < (candidateKeysSet2.size() - 1)) {
						buff.append(",");
					}
				}
				buff.append("(" + counter + ")");
			}
		}
		return buff.toString();
	}
}